{"ast":null,"code":"var _jsxFileName = \"/home/tanu/Workspace/quiz12/src/user/QuilPlayPart/PlayQuizPart.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, Card, CardContent } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport '../style/playquiz.css';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nimport Footer from '../footer/Footer';\nconst BorderLinearProgress = withStyles(theme => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n    width: \"100%\"\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#FFDD52'\n  }\n}))(LinearProgress);\nconst useStyles = makeStyles(theme => ({\n  gridContainer: {\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    background: \"#7555D9\",\n    minHeight: \"100vh\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  pro: {\n    textAlign: \"center\"\n  }\n}));\n\nfunction PlayQuizPart({\n  quizdata,\n  que\n}) {\n  var _quiz$activeStep, _quiz$activeStep$opti;\n\n  const [score, setScore] = useState(0);\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [meter, setMeter] = useState(false);\n  const [correctAns, setCorrectAns] = useState(0);\n  const [clickedAns, setClickedAns] = useState(0);\n  const [progress, setProgress] = useState(false);\n  const [count, setCount] = useState(1);\n  let [answerList, setAnswerList] = React.useState([{\n    qusId: \"\",\n    answer: \"\",\n    correct: \"\"\n  }]);\n  let quiz = [{\n    label: que === null || que === void 0 ? void 0 : que.question,\n    options: que === null || que === void 0 ? void 0 : que.options,\n    answer: que === null || que === void 0 ? void 0 : que.answer\n  }];\n  const classes = useStyles();\n\n  if (que === null || que === void 0 ? void 0 : que.length) {\n    quiz = que;\n  }\n\n  function showProgress(index) {\n    var increment = Math.ceil(count / maxSteps * 100);\n    setProgress(increment);\n  }\n\n  const maxSteps = quiz.length;\n\n  const handleSelect = label => {\n    setClickedAns(label);\n\n    if (label === quiz[activeStep].answer) {\n      increaseScore();\n      setCorrectAns(quiz[activeStep].answer);\n      setAnswerList([...answerList, {\n        qusId: quiz[activeStep] + 1,\n        answer: clickedAns,\n        correct: \"yes\"\n      }]);\n    } else {\n      setCorrectAns(quiz[activeStep].answer);\n      setAnswerList([...answerList, {\n        qusId: quiz[activeStep] + 1,\n        answer: clickedAns,\n        correct: \"no\"\n      }]);\n    }\n  };\n\n  const handleNext = label => {\n    if (maxSteps - 1 === activeStep) {\n      handleSubmit();\n    } else {\n      setTimeout(() => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n        setCount(count + 1);\n      }, 500);\n    }\n\n    handleSelect(label);\n    showProgress(quiz[activeStep].qusId);\n  };\n\n  const increaseScore = () => {\n    setScore(score + 1);\n  };\n\n  const handleSubmit = async () => {\n    const data = {\n      quizId: quizdata[0].adminQuizId,\n      score: score\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.INSERT\"\n      }\n    };\n    const result = await services.getResult(data, options);\n    setMeter(result.data.data);\n  };\n\n  if (meter === true) {\n    //   var datalist={list:que.length,quizId:quizId,createdBy:createdBy,score:{score}}\n    //   localStorage.setItem('alldata',JSON.stringify(datalist))\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/score'\n      },\n      push: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 10\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    sm: 6,\n    md: 6,\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 22\n    }\n  }, quizdata[0].title)), /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 22\n    }\n  }, \"Question \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 56\n    }\n  }, count, \"/\", maxSteps))), /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(BorderLinearProgress, {\n    variant: \"determinate\",\n    value: progress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Card, {\n    className: \"playoptioncard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"questionname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, quiz[activeStep].questionTitle), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playcard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 20\n    }\n  }, (_quiz$activeStep = quiz[activeStep]) === null || _quiz$activeStep === void 0 ? void 0 : (_quiz$activeStep$opti = _quiz$activeStep.optionsArray) === null || _quiz$activeStep$opti === void 0 ? void 0 : _quiz$activeStep$opti.map((options, index) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, options.optionImg.length ? /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: correctAns === options.optionLabel ? 'correctplay' : clickedAns === options.optionLabel ? 'incorrectplay' : 'options',\n      correct: quiz[activeStep].answer,\n      onClick: () => {\n        handleNext(options.optionLabel);\n      },\n      key: index,\n      id: \"cardbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      sm: 4,\n      md: 4,\n      lg: 4,\n      className: \"image-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"optionImg\",\n      src: `${quizdata[0].image_base_path}/${options.optionImg}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 26\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      sm: 8,\n      md: 8,\n      lg: 8,\n      className: \"optionbg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: \"cardcontent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"optioncontent\",\n      id: \"cardText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 26\n      }\n    }, options.optionLabel)))) : /*#__PURE__*/React.createElement(Grid, {\n      justify: \"center\",\n      container: true,\n      className: \"new\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      sm: 10,\n      md: 10,\n      lg: 10,\n      className: correctAns === options.optionLabel ? 'correctplay' : clickedAns === options.optionLabel ? 'incorrectplay' : 'options',\n      correct: quiz[activeStep].answer,\n      onClick: () => {\n        handleNext(options.optionLabel);\n      },\n      key: index,\n      id: \"cardbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: \"newcontent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"optioncontent\",\n      id: \"cardText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 23\n      }\n    }, options.optionLabel)))));\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 8\n    }\n  }));\n}\n\nexport default PlayQuizPart;","map":{"version":3,"sources":["/home/tanu/Workspace/quiz12/src/user/QuilPlayPart/PlayQuizPart.js"],"names":["React","useState","useEffect","Grid","Card","CardContent","makeStyles","withStyles","LinearProgress","services","Redirect","Footer","BorderLinearProgress","theme","root","height","borderRadius","width","colorPrimary","backgroundColor","palette","grey","type","bar","useStyles","gridContainer","paddingLeft","paddingRight","background","minHeight","paper","padding","spacing","textAlign","color","text","secondary","pro","PlayQuizPart","quizdata","que","score","setScore","activeStep","setActiveStep","meter","setMeter","correctAns","setCorrectAns","clickedAns","setClickedAns","progress","setProgress","count","setCount","answerList","setAnswerList","qusId","answer","correct","quiz","label","question","options","classes","length","showProgress","index","increment","Math","ceil","maxSteps","handleSelect","increaseScore","handleNext","handleSubmit","setTimeout","prevActiveStep","data","quizId","adminQuizId","method","headers","result","getResult","pathname","title","questionTitle","optionsArray","map","optionImg","optionLabel","image_base_path"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport {Grid,Card, CardContent} from '@material-ui/core';\nimport { makeStyles,withStyles } from '@material-ui/core/styles';\nimport '../style/playquiz.css'\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nimport Footer from '../footer/Footer';\n\nconst BorderLinearProgress = withStyles((theme) => ({\n    root: {\n      height: 10,\n      borderRadius: 5,\n      width:\"100%\",\n    },\n    colorPrimary: {\n      backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n    },\n    bar: {\n      borderRadius: 5,\n      backgroundColor: '#FFDD52',\n    },\n  }))(LinearProgress);\n  \nconst useStyles = makeStyles((theme)=>({\n    gridContainer: {\n      paddingLeft: \"20px\",\n      paddingRight: \"20px\",\n      background:\"#7555D9\",\n      minHeight:\"100vh\"\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n      },\n      pro:{\n          textAlign:\"center\"\n      }\n    \n  }));\nfunction PlayQuizPart({quizdata,que}) {\n const[score,setScore]=useState(0)\n const [activeStep, setActiveStep] = React.useState(0);\n const [meter,setMeter]=useState(false);\n const [correctAns,setCorrectAns]= useState(0);\n const [clickedAns,setClickedAns]= useState(0);\n const [progress,setProgress]=useState(false);\n const [count,setCount]=useState(1);\n let [answerList, setAnswerList] = React.useState([\n  {\n    qusId:\"\",\n    answer:\"\",\n    correct:\"\"\n  },\n ]);\n\n\n  \n  let quiz = [\n    {\n        label: que?.question,\n        options: que?.options,\n        answer:que?.answer\n    },\n];\n\n    const classes = useStyles();\n    if (que?.length) {\n      quiz = que;\n    }\n    \n    function showProgress(index) {\n\n      var increment = Math.ceil((count) / (maxSteps) * 100);\n      setProgress(increment)\n      \n    }\n    const maxSteps = quiz.length;\n    const handleSelect = (label)=>{\n      setClickedAns(label)\n       if(label===quiz[activeStep].answer){\n            increaseScore();\n           setCorrectAns(quiz[activeStep].answer)\n           setAnswerList([\n            ...\n            answerList,\n            {\n             qusId:quiz[activeStep]+1,\n             answer:clickedAns,\n             correct:\"yes\"\n            }\n          ])\n       }\n       else{\n         setCorrectAns(quiz[activeStep].answer)\n         setAnswerList([\n          ...\n          answerList,\n          {\n           qusId:quiz[activeStep]+1,\n           answer:clickedAns,\n           correct:\"no\"\n          }\n        ])\n       }\n     \n    }\n\n\nconst handleNext = (label)=>{\n\n  if(maxSteps-1 ===activeStep){\n    handleSubmit()\n  }\n  else{\n    setTimeout(()=>{setActiveStep(prevActiveStep => prevActiveStep + 1)\n      setCount(count+1)},500)\n  }\n  handleSelect(label);\n  showProgress(quiz[activeStep].qusId);\n}\nconst increaseScore = ()=>{\n  setScore(score+1)\n}\nconst handleSubmit = async() =>{\n    const data={\n      quizId:quizdata[0].adminQuizId,\n      score:score\n    }\n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.INSERT\",\n      }\n    }\n    const result = await services.getResult(data, options)\n     setMeter(result.data.data)\n}\nif(meter===true)\n{\n//   var datalist={list:que.length,quizId:quizId,createdBy:createdBy,score:{score}}\n//   localStorage.setItem('alldata',JSON.stringify(datalist))\n  return(<Redirect to={{\n    pathname: '/score',\n    }} push={true}\n     />\n    )\n\n}\n    return (\n        <div className={classes.gridContainer}>\n        <Grid container>\n           <Grid item xs></Grid>\n            <Grid item xs={11} sm={6} md={6} lg={4} >\n                 <div justify=\"center\">\n                     <h3 className=\"title\">{quizdata[0].title}</h3>\n                   \n                 </div>\n                 <div justify=\"center\">     \n                     <h4 className=\"question\">Question <span>{count}/{maxSteps}</span></h4>\n                 </div>\n                 <div justify=\"center\">\n                    <BorderLinearProgress variant=\"determinate\" value={progress} />\n                 </div>\n                 <Card className=\"playoptioncard\">\n                <h3 className=\"questionname\">{quiz[activeStep].questionTitle}</h3>\n                   <div className=\"playcard\">\n                    {\n                    quiz[activeStep]?.optionsArray?.map((options,index)=>{\n                        \n                    return(\n                      <>\n                      {options.optionImg.length ?\n                        <Grid\n                        container\n                        className= {\n                          correctAns === options.optionLabel ?\n                          'correctplay' : \n                        clickedAns === options.optionLabel?\n                        'incorrectplay' : 'options'}\n                        correct={quiz[activeStep].answer}\n                        onClick={() => { handleNext(options.optionLabel) }}\n                        key={index}\n                        id=\"cardbox\">\n                        \n                        \n                        <Grid item xs={4} sm={4} md={4} lg={4} className=\"image-div\" >\n                         <img className=\"optionImg\" src={`${quizdata[0].image_base_path}/${options.optionImg}`} /> \n                     </Grid>\n                     <Grid item xs={8} sm={8} md={8} lg={8} className=\"optionbg\" >\n                       <CardContent className=\"cardcontent\">\n                         <h3 className=\"optioncontent\" id=\"cardText\">\n                           {options.optionLabel}\n                         </h3>\n                       </CardContent>\n                  \n                    \n                     </Grid>\n                     </Grid>\n                     : \n                   \n                     <Grid justify=\"center\" container className=\"new\">\n                       <Grid item xs={10} sm={10} md={10} lg={10}\n                     className= {\n                      correctAns === options.optionLabel ?\n                      'correctplay' : \n                    clickedAns === options.optionLabel?\n                    'incorrectplay' : 'options'}\n                    correct={quiz[activeStep].answer}\n                    onClick={() => { handleNext(options.optionLabel) }}\n                     key={index}\n                     id=\"cardbox\">\n                    \n                    <CardContent className=\"newcontent\">\n                      <h3 className=\"optioncontent\" id=\"cardText\">\n                        {options.optionLabel}\n                      </h3>\n                    </CardContent>\n               \n                  </Grid>\n                     </Grid>\n                    }</>\n\n                    )\n\n                    })\n                    } \n                </div>\n         </Card>\n            </Grid>\n            <Grid item xs></Grid>\n       </Grid>\n       <Footer/>\n  </div>\n    )\n}\n\nexport default PlayQuizPart\n"]},"metadata":{},"sourceType":"module"}