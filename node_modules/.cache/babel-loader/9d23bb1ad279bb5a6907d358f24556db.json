{"ast":null,"code":"var _jsxFileName = \"/home/tanu/Workspace/quiz12/src/user/form/PlayQuiz.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid, Paper, Card, CardMedia, CardContent, Typography } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport '../style/questionlist.css';\nimport '../style/playquiz.css';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nconst BorderLinearProgress = withStyles(theme => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n    width: \"100%\"\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#FFDD52'\n  }\n}))(LinearProgress);\nconst useStyles = makeStyles(theme => ({\n  gridContainer: {\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    background: \"#7555D9\",\n    minHeight: \"100vh\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  pro: {\n    textAlign: \"center\"\n  }\n}));\n\nfunction PlayQuiz({\n  quizlist,\n  quizId,\n  createdBy\n}) {\n  var _quiz$activeStep, _quiz$activeStep$opti;\n\n  const [score, setScore] = useState(0);\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [meter, setMeter] = useState(false);\n  const [correctAns, setCorrectAns] = useState(0);\n  const [clickedAns, setClickedAns] = useState(0);\n  const [progress, setProgress] = useState(false);\n  const json = localStorage.getItem(\"feedbackby\");\n  let quiz = [{\n    label: quizlist === null || quizlist === void 0 ? void 0 : quizlist.question,\n    options: quizlist === null || quizlist === void 0 ? void 0 : quizlist.options\n  }];\n  const classes = useStyles();\n\n  if (quizlist === null || quizlist === void 0 ? void 0 : quizlist.length) {\n    quiz = quizlist;\n  }\n\n  function showProgress(index) {\n    var increment = Math.ceil(index / maxSteps * 100);\n    setProgress(increment);\n  }\n\n  const maxSteps = quiz.length;\n\n  const handleSkip = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleSelect = (optId, label) => {\n    if (label === quiz[activeStep].answer) {\n      increaseScore();\n      setCorrectAns(quiz[activeStep].answer);\n      setClickedAns(label);\n    }\n\n    debugger;\n  };\n\n  console.log(correctAns);\n\n  const handleNext = (optId, label) => {\n    if (maxSteps !== quiz[activeStep].qusId) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n    } else {\n      handleSubmit();\n    }\n\n    handleSelect(optId, label);\n    showProgress(quiz[activeStep].qusId);\n  };\n\n  const increaseScore = () => {\n    setScore(score + 1);\n  };\n\n  const handleSubmit = async () => {\n    const data = {\n      quizId: quizId,\n      feedbackBy: json,\n      score: score\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.INSERT\"\n      }\n    };\n    const result = await services.getResult(data, options);\n    setMeter(result.data.data);\n  };\n\n  if (meter === true) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: \"/score\",\n        state: {\n          data: {\n            score\n          },\n          quizlist: {\n            quizlist\n          },\n          createdBy: {\n            createdBy\n          },\n          feedbackBy: json\n        }\n      },\n      push: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 10\n      }\n    });\n    debugger;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    sm: 6,\n    md: 6,\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, \"2021 Friendship\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, \"Dare\")), /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, \"Question \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 55\n    }\n  }, \"1/15\"))), /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(BorderLinearProgress, {\n    variant: \"determinate\",\n    value: progress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Card, {\n    className: \"questioncard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"questionname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, quiz[activeStep].qusId, \":\", quiz[activeStep].title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"carddesign\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, (_quiz$activeStep = quiz[activeStep]) === null || _quiz$activeStep === void 0 ? void 0 : (_quiz$activeStep$opti = _quiz$activeStep.options) === null || _quiz$activeStep$opti === void 0 ? void 0 : _quiz$activeStep$opti.map((options, index) => {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: correctAns === options.optionLabel ? 'correct' : clickedAns === options.optionLabel ? 'incorrect' : 'optionpart',\n      correct: quiz[activeStep].answer,\n      key: index,\n      onClick: () => {\n        handleNext(options.optionId, options.optionLabel);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      sm: 4,\n      md: 4,\n      lg: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 23\n      }\n    }, options.optionImg.length ? /*#__PURE__*/React.createElement(\"img\", {\n      className: \"optionImg\",\n      src: options.optionImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 34\n      }\n    }) : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 34\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      sm: 8,\n      md: 8,\n      lg: 8,\n      className: \"optionbg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: \"cardcontent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"optioncontent\",\n      id: \"cardText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 27\n      }\n    }, options.optionLabel))));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"start-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, maxSteps !== quiz[activeStep].qusId ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"skip\",\n    onClick: () => {\n      maxSteps !== quiz[activeStep].qusId ? handleSkip() : handleSubmit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 18\n    }\n  }, \"Skip the Question\") : null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default PlayQuiz;","map":{"version":3,"sources":["/home/tanu/Workspace/quiz12/src/user/form/PlayQuiz.js"],"names":["React","useState","useEffect","useParams","Grid","Paper","Card","CardMedia","CardContent","Typography","makeStyles","withStyles","LinearProgress","services","Redirect","BorderLinearProgress","theme","root","height","borderRadius","width","colorPrimary","backgroundColor","palette","grey","type","bar","useStyles","gridContainer","paddingLeft","paddingRight","background","minHeight","paper","padding","spacing","textAlign","color","text","secondary","pro","PlayQuiz","quizlist","quizId","createdBy","score","setScore","activeStep","setActiveStep","meter","setMeter","correctAns","setCorrectAns","clickedAns","setClickedAns","progress","setProgress","json","localStorage","getItem","quiz","label","question","options","classes","length","showProgress","index","increment","Math","ceil","maxSteps","handleSkip","prevActiveStep","handleSelect","optId","answer","increaseScore","console","log","handleNext","qusId","handleSubmit","data","feedbackBy","method","headers","result","getResult","pathname","state","title","map","optionLabel","optionId","optionImg"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport { useParams } from 'react-router-dom';\nimport {  Grid, Paper,Card, CardMedia, CardContent, Typography } from '@material-ui/core';\nimport { makeStyles,withStyles } from '@material-ui/core/styles';\nimport '../style/questionlist.css'\nimport '../style/playquiz.css'\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\n\nconst BorderLinearProgress = withStyles((theme) => ({\n    root: {\n      height: 10,\n      borderRadius: 5,\n      width:\"100%\",\n    },\n    colorPrimary: {\n      backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n    },\n    bar: {\n      borderRadius: 5,\n      backgroundColor: '#FFDD52',\n    },\n  }))(LinearProgress);\n  \nconst useStyles = makeStyles((theme)=>({\n    gridContainer: {\n      paddingLeft: \"20px\",\n      paddingRight: \"20px\",\n      background:\"#7555D9\",\n      minHeight:\"100vh\"\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n      },\n      pro:{\n          textAlign:\"center\"\n      }\n    \n  }));\nfunction PlayQuiz({quizlist,quizId,createdBy}) {\n  \n const[score,setScore]=useState(0)\n const [activeStep, setActiveStep] = React.useState(0);\n const [meter,setMeter]=useState(false);\n const [correctAns,setCorrectAns]= useState(0);\n const [clickedAns,setClickedAns]= useState(0);\n const [progress,setProgress]=useState(false);\n const json =localStorage.getItem(\"feedbackby\")\n  \n  let quiz = [\n    {\n        label: quizlist?.question,\n        options: quizlist?.options,\n    },\n];\n\n    const classes = useStyles();\n    if (quizlist?.length) {\n      quiz = quizlist;\n    }\n    \n    function showProgress(index) {\n\n      var increment = Math.ceil((index) / (maxSteps) * 100);\n     \n      setProgress(increment)\n      \n    }\n    const maxSteps = quiz.length;\n    const handleSkip = () => { setActiveStep(prevActiveStep => prevActiveStep + 1); };\n    const handleSelect = (optId,label)=>{\n       if(label===quiz[activeStep].answer){\n            increaseScore();\n           setCorrectAns(quiz[activeStep].answer)\n           setClickedAns(label)\n   \n       }\n      debugger\n    }\nconsole.log(correctAns)\nconst handleNext = (optId,label)=>{\n\n  if( maxSteps!==quiz[activeStep].qusId){\n    setActiveStep(prevActiveStep => prevActiveStep + 1)\n  }\n  else{\n    handleSubmit();\n  }\n  handleSelect(optId,label);\n\n  showProgress(quiz[activeStep].qusId);\n}\nconst increaseScore = ()=>{\n  setScore(score+1)\n}\nconst handleSubmit = async() =>{\n    const data={\n      quizId:quizId,\n      feedbackBy:json,\n      score:score\n    }\n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.INSERT\",\n      }\n    }\n    const result = await services.getResult(data, options)\n     setMeter(result.data.data)\n}\nif(meter===true)\n{\n \n  return(<Redirect to={{pathname:\"/score\" ,state:{data:{score},quizlist:{quizlist},createdBy:{createdBy},feedbackBy:json}}} push={true} />)\n debugger\n}\n    return (\n        <div className={classes.gridContainer}>\n        <Grid container>\n           <Grid item xs></Grid>\n            <Grid item xs={11} sm={6} md={6} lg={4} >\n                 <div justify=\"center\">\n                    <h3 className=\"text1\">2021 Friendship</h3>\n                    <h3 className=\"text2\">Dare</h3>\n                 </div>\n                 <div justify=\"center\">     \n                    <h4 className=\"question\">Question <span>1/15</span></h4>\n                 </div>\n                 <div justify=\"center\">\n                    <BorderLinearProgress variant=\"determinate\" value={progress} />\n                 </div>\n            <Card className=\"questioncard\">\n                <h3 className=\"questionname\">{quiz[activeStep].qusId}:{quiz[activeStep].title}</h3>\n           \n                  \n                    <div className=\"carddesign\">\n                    {\n                    quiz[activeStep]?.options?.map((options,index)=>{\n\n                    return(\n                        <Grid\n                      container\n                      className= {\n                        correctAns === options.optionLabel ?\n                        'correct' : \n                        clickedAns === options.optionLabel ? \n                        'incorrect' : 'optionpart'\n                      }\n\n                      correct={quiz[activeStep].answer}\n                      key={index}\n                      onClick={()=>{handleNext(options.optionId,options.optionLabel)}}\n                      >\n                      <Grid item xs={4} sm={4} md={4}lg={4}>\n                      {options.optionImg.length\n                                ?<img className=\"optionImg\" \n                                  src={options.optionImg}/>\n                                :<span></span>\n                              }\n                      </Grid>\n                      <Grid item xs={8} sm={8} md={8}lg={8} className=\"optionbg\" >\n                        <CardContent className=\"cardcontent\">\n                          <h3 className=\"optioncontent\" id=\"cardText\">\n                        {options.optionLabel}\n                          </h3>\n                        </CardContent>\n                      </Grid>\n                      </Grid>\n                    )\n\n                    })\n                    } \n                </div>\n               \n                <div className=\"start-wrapper\">\n                  \n                 {\n                 maxSteps!==quiz[activeStep].qusId?\n                 <button className=\"skip\"\n                 onClick={()=>{ maxSteps!==quiz[activeStep].qusId?handleSkip():handleSubmit() }}\n                 >Skip the Question</button>:null\n                  } \n                </div> \n         </Card>\n            </Grid>\n            <Grid item xs></Grid>\n       </Grid>\n  </div>\n    )\n}\n\nexport default PlayQuiz\n"]},"metadata":{},"sourceType":"module"}