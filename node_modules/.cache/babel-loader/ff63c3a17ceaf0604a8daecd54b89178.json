{"ast":null,"code":"var _jsxFileName = \"/home/tanu/Workspace/quiz12/src/user/QuilPlayPart/PlayQuizPart.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, Card, CardContent } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport '../style/playquiz.css';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nimport Footer from '../footer/Footer';\nconst BorderLinearProgress = withStyles(theme => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n    width: \"100%\"\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#FFDD52'\n  }\n}))(LinearProgress);\nconst useStyles = makeStyles(theme => ({\n  gridContainer: {\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    background: \"#7555D9\",\n    minHeight: \"100vh\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  pro: {\n    textAlign: \"center\"\n  }\n}));\n\nfunction PlayQuizPart({\n  que,\n  quiz\n}) {\n  console.log(que, quiz);\n  debugger; //  const[score,setScore]=useState(0)\n  //  const [activeStep, setActiveStep] = React.useState(0);\n  //  const [meter,setMeter]=useState(false);\n  //  const [correctAns,setCorrectAns]= useState(0);\n  //  const [clickedAns,setClickedAns]= useState(0);\n  //  const [progress,setProgress]=useState(false);\n  //  const [count,setCount]=useState(1);\n  //  const json =localStorage.getItem(\"feedbackby\")\n  //  const [title,setTitle]=useState({})\n  //   let quiz = [\n  //     {\n  //         label: quizlist?.question,\n  //         options: quizlist?.options,\n  //     },\n  // ];\n  //     const classes = useStyles();\n  //     if (quizlist?.length) {\n  //       quiz = quizlist;\n  //     }\n  //     function showProgress(index) {\n  //       var increment = Math.ceil((count) / (maxSteps) * 100);\n  //       setProgress(increment)\n  //     }\n  //     const maxSteps = quiz.length;\n  //     const handleSelect = (optId,label)=>{\n  //        setClickedAns(optId)\n  //        if(optId===quiz[activeStep].answerId){\n  //             increaseScore();\n  //            setCorrectAns(quiz[activeStep].answerId)\n  //        }\n  //        else{\n  //          setCorrectAns(quiz[activeStep].answerId)\n  //        }\n  //     }\n  // const handleNext = (optId,label)=>{\n  //   if(maxSteps-1 !==activeStep){\n  //     setTimeout(()=>{setActiveStep(prevActiveStep => prevActiveStep + 1)\n  //       setCount(count+1)},500)\n  //   }\n  //   else{\n  //      handleSubmit()\n  //   }\n  //   handleSelect(optId,label);\n  //   showProgress(quiz[activeStep].qusId);\n  // }\n  // const increaseScore = ()=>{\n  //   setScore(score+1)\n  // }\n  // const handleSubmit = async() =>{\n  //     const data={\n  //       quizId:quizId,\n  //       feedbackBy:json,\n  //       score:score\n  //     }\n  //     const options = {\n  //       method: 'POST',\n  //       headers: {\n  //         \"Apiuserid\": \"49507884\",\n  //         \"Scope\": \"In.QuizApp.INSERT\",\n  //       }\n  //     }\n  //     const result = await services.getResult(data, options)\n  //      setMeter(result.data.data)\n  // }\n  // if(meter===true)\n  // {\n  //   var datalist={list:quizlist.length,quizId:quizId,createdBy:createdBy,score:{score}}\n  //   localStorage.setItem('alldata',JSON.stringify(datalist))\n  //   return(<Redirect to={{\n  //     pathname: '/score',\n  //     state:{category:{category}}}} push={true} />)\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default PlayQuizPart;","map":{"version":3,"sources":["/home/tanu/Workspace/quiz12/src/user/QuilPlayPart/PlayQuizPart.js"],"names":["React","useState","useEffect","Grid","Card","CardContent","makeStyles","withStyles","LinearProgress","services","Redirect","Footer","BorderLinearProgress","theme","root","height","borderRadius","width","colorPrimary","backgroundColor","palette","grey","type","bar","useStyles","gridContainer","paddingLeft","paddingRight","background","minHeight","paper","padding","spacing","textAlign","color","text","secondary","pro","PlayQuizPart","que","quiz","console","log","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAQC,IAAR,EAAaC,IAAb,EAAmBC,WAAnB,QAAqC,mBAArC;AACA,SAASC,UAAT,EAAoBC,UAApB,QAAsC,0BAAtC;AACA,OAAO,uBAAP;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,MAAMC,oBAAoB,GAAGL,UAAU,CAAEM,KAAD,KAAY;AAChDC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,EADJ;AAEJC,IAAAA,YAAY,EAAE,CAFV;AAGJC,IAAAA,KAAK,EAAC;AAHF,GAD0C;AAMhDC,EAAAA,YAAY,EAAE;AACZC,IAAAA,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,IAAd,CAAmBR,KAAK,CAACO,OAAN,CAAcE,IAAd,KAAuB,OAAvB,GAAiC,GAAjC,GAAuC,GAA1D;AADL,GANkC;AAShDC,EAAAA,GAAG,EAAE;AACHP,IAAAA,YAAY,EAAE,CADX;AAEHG,IAAAA,eAAe,EAAE;AAFd;AAT2C,CAAZ,CAAD,CAAV,CAavBX,cAbuB,CAA7B;AAeA,MAAMgB,SAAS,GAAGlB,UAAU,CAAEO,KAAD,KAAU;AACnCY,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,MADA;AAEbC,IAAAA,YAAY,EAAE,MAFD;AAGbC,IAAAA,UAAU,EAAC,SAHE;AAIbC,IAAAA,SAAS,EAAC;AAJG,GADoB;AAOnCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO,EAAElB,KAAK,CAACmB,OAAN,CAAc,CAAd,CADN;AAEHC,IAAAA,SAAS,EAAE,QAFR;AAGHC,IAAAA,KAAK,EAAErB,KAAK,CAACO,OAAN,CAAce,IAAd,CAAmBC;AAHvB,GAP4B;AAYjCC,EAAAA,GAAG,EAAC;AACAJ,IAAAA,SAAS,EAAC;AADV;AAZ6B,CAAV,CAAD,CAA5B;;AAiBA,SAASK,YAAT,CAAsB;AAACC,EAAAA,GAAD;AAAKC,EAAAA;AAAL,CAAtB,EAAkC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAgBC,IAAhB;AACA,WAF8B,CAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACI,sBACI;AAAK,IAAA,SAAS,EAAEG,OAAO,CAAClB,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AA4DH;;AAED,eAAea,YAAf","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport {Grid,Card, CardContent} from '@material-ui/core';\nimport { makeStyles,withStyles } from '@material-ui/core/styles';\nimport '../style/playquiz.css'\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nimport Footer from '../footer/Footer';\n\nconst BorderLinearProgress = withStyles((theme) => ({\n    root: {\n      height: 10,\n      borderRadius: 5,\n      width:\"100%\",\n    },\n    colorPrimary: {\n      backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n    },\n    bar: {\n      borderRadius: 5,\n      backgroundColor: '#FFDD52',\n    },\n  }))(LinearProgress);\n  \nconst useStyles = makeStyles((theme)=>({\n    gridContainer: {\n      paddingLeft: \"20px\",\n      paddingRight: \"20px\",\n      background:\"#7555D9\",\n      minHeight:\"100vh\"\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n      },\n      pro:{\n          textAlign:\"center\"\n      }\n    \n  }));\nfunction PlayQuizPart({que,quiz}) {\n    console.log(que,quiz)\n    debugger\n//  const[score,setScore]=useState(0)\n//  const [activeStep, setActiveStep] = React.useState(0);\n//  const [meter,setMeter]=useState(false);\n//  const [correctAns,setCorrectAns]= useState(0);\n//  const [clickedAns,setClickedAns]= useState(0);\n//  const [progress,setProgress]=useState(false);\n//  const [count,setCount]=useState(1);\n//  const json =localStorage.getItem(\"feedbackby\")\n//  const [title,setTitle]=useState({})\n \n\n  \n//   let quiz = [\n//     {\n//         label: quizlist?.question,\n//         options: quizlist?.options,\n//     },\n// ];\n\n//     const classes = useStyles();\n//     if (quizlist?.length) {\n//       quiz = quizlist;\n//     }\n    \n//     function showProgress(index) {\n\n//       var increment = Math.ceil((count) / (maxSteps) * 100);\n//       setProgress(increment)\n      \n//     }\n//     const maxSteps = quiz.length;\n//     const handleSelect = (optId,label)=>{\n//        setClickedAns(optId)\n//        if(optId===quiz[activeStep].answerId){\n//             increaseScore();\n//            setCorrectAns(quiz[activeStep].answerId)\n//        }\n//        else{\n//          setCorrectAns(quiz[activeStep].answerId)\n//        }\n     \n//     }\n\n\n// const handleNext = (optId,label)=>{\n\n//   if(maxSteps-1 !==activeStep){\n//     setTimeout(()=>{setActiveStep(prevActiveStep => prevActiveStep + 1)\n//       setCount(count+1)},500)\n    \n   \n//   }\n//   else{\n   \n//      handleSubmit()\n//   }\n//   handleSelect(optId,label);\n\n//   showProgress(quiz[activeStep].qusId);\n// }\n// const increaseScore = ()=>{\n//   setScore(score+1)\n// }\n// const handleSubmit = async() =>{\n//     const data={\n//       quizId:quizId,\n//       feedbackBy:json,\n//       score:score\n//     }\n//     const options = {\n//       method: 'POST',\n//       headers: {\n//         \"Apiuserid\": \"49507884\",\n//         \"Scope\": \"In.QuizApp.INSERT\",\n//       }\n//     }\n//     const result = await services.getResult(data, options)\n//      setMeter(result.data.data)\n// }\n// if(meter===true)\n// {\n//   var datalist={list:quizlist.length,quizId:quizId,createdBy:createdBy,score:{score}}\n//   localStorage.setItem('alldata',JSON.stringify(datalist))\n//   return(<Redirect to={{\n//     pathname: '/score',\n//     state:{category:{category}}}} push={true} />)\n\n// }\n    return (\n        <div className={classes.gridContainer}>\n        {/* <Grid container>\n           <Grid item xs></Grid>\n            <Grid item xs={11} sm={6} md={6} lg={4} >\n                 <div justify=\"center\">\n                     <h3 className=\"title\">{title.title}</h3>\n                   \n                 </div>\n                 <div justify=\"center\">     \n                     <h4 className=\"question\">Question <span>{count}/{maxSteps}</span></h4>\n                 </div>\n                 <div justify=\"center\">\n                    <BorderLinearProgress variant=\"determinate\" value={progress} />\n                 </div>\n                 <Card className=\"playoptioncard\">\n                <h3 className=\"questionname\">{quiz[activeStep].title}</h3>\n                   <div className=\"playcard\">\n                    {\n                    quiz[activeStep]?.options?.map((options,index)=>{\n\n                    return(\n                        <Grid\n                      container\n                      className= {\n                        correctAns === options.optionId ?\n                        'correctplay' : \n                      clickedAns === options.optionId?\n                      'incorrectplay' : 'options'}\n                      correct={quiz[activeStep].answer}\n                      key={index}\n                      onClick={()=>{handleNext(options.optionId,options.optionLabel)}}\n                      >\n                      <Grid item xs={4} sm={4} md={4}lg={4} className=\"img-div\">\n                      {options.optionImg.length\n                                ?<img className=\"playImg\" \n                                  src={options.optionImg}/>\n                                :<span></span>\n                              }\n                      </Grid> \n                      <Grid item xs={8} sm={8} md={8}lg={8} className=\"card-div\">\n                        <CardContent className=\"playcontent\">\n                          <h3 className=\"play-head\"id=\"cardText\">\n                        {options.optionLabel}\n                          </h3>\n                        </CardContent>\n                      </Grid>\n                      </Grid>\n                    )\n\n                    })\n                    } \n                </div>\n         </Card>\n            </Grid>\n            <Grid item xs></Grid>\n       </Grid>\n       <Footer/> */}\n  </div>\n    )\n}\n\nexport default PlayQuizPart\n"]},"metadata":{},"sourceType":"module"}