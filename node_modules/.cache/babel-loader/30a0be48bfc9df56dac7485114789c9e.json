{"ast":null,"code":"var _jsxFileName = \"/home/tanu/Workspace/quiz12/src/user/question/DummyQuestionList.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, Card, CardContent } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport '../style/questionlist.css';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nimport Footer from '../footer/Footer';\nconst BorderLinearProgress = withStyles(theme => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n    width: \"100%\"\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#FFDD52'\n  }\n}))(LinearProgress);\nconst useStyles = makeStyles(theme => ({\n  gridContainer: {\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    background: \"#7555D9\",\n    minHeight: \"100vh\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  pro: {\n    textAlign: \"center\"\n  }\n}));\n\nfunction DummyQuestionList({\n  questionlist\n}) {\n  var _totalArray$2, _totalArray$3, _totalArray$3$options;\n\n  var totalArray = questionlist;\n  console.log(totalArray);\n  const classes = useStyles();\n  const [title, setTitle] = useState({});\n  var categoryId = JSON.parse(localStorage.getItem(\"categoryId\"));\n  useEffect(() => {\n    getCategory();\n  }, [1]);\n\n  const getCategory = async () => {\n    const categoryData = {\n      categoryId: categoryId\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.READ\"\n      }\n    };\n    const result = await services.getCategory(categoryData, options);\n    console.log(result);\n    setTitle(result.data.data);\n  }; // let tutorialSteps = [\n  //   {\n  //     label: questionlist?.question,\n  //     options: questionlist?.optionsArray,\n  //   },\n  // ];\n  // if (questionlist?.length) {\n  //   tutorialSteps = questionlist;\n  // }\n\n\n  const data = JSON.parse(localStorage.getItem('userInfo'));\n  const createdBy = data['name'];\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [answerList, setAnswerList] = React.useState([]);\n  const [skipList, setSkipList] = React.useState([]);\n  const [createQuiz, setCreateQuiz] = useState();\n  const [result, setResult] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(1);\n  const [clickedAns, setClickedAns] = useState(0);\n\n  function showProgress(index) {\n    var increment = Math.ceil(activeStep / 9 * 100);\n    setProgress(increment);\n  }\n\n  const handleNext = (id, label) => {\n    var _totalArray$;\n\n    const qusId = (_totalArray$ = totalArray[0]) === null || _totalArray$ === void 0 ? void 0 : _totalArray$.qusId;\n    const answer = label;\n    const answerId = id;\n    setClickedAns(id);\n\n    if (5 === answerList.length) {\n      setAnswerList([...answerList, {\n        qusId: qusId,\n        answer: answer,\n        answerId: answerId\n      }]);\n      console.log(answerList.length);\n      debugger;\n      setTimeout(() => {\n        handleSubmit([...answerList, {\n          qusId: qusId,\n          answer: answer,\n          answerId: answerId\n        }]);\n      }, 500);\n    } else {\n      setAnswerList([...answerList, {\n        qusId: qusId,\n        answer: answer,\n        answerId: answerId\n      }]);\n      console.log(answerList.length);\n      setTimeout(() => {\n        console.log(totalArray[0]);\n        debugger;\n        var totalArray = totalArray.splice(0, 1);\n        console.log(totalArray);\n        setCount(count + 1);\n      }, 500); // debugger\n    }\n\n    showProgress(totalArray[0].qusId);\n  };\n\n  const handleSkip = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleSubmit = async ([...answerList]) => {\n    const list = {\n      categoryId: categoryId,\n      createdBy: createdBy,\n      quizQuestions: answerList\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.INSERT\"\n      }\n    };\n    const result = await services.createQuiz(list, options);\n    setCreateQuiz(result.data.data);\n    setResult(true);\n\n    if (result.data.code === 200) {\n      setResult(true);\n    }\n  };\n\n  if (result) {\n    localStorage.setItem(\"createId\", JSON.stringify(createQuiz));\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: \"/sharelink\",\n        state: {\n          quizId: createQuiz\n        }\n      },\n      push: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    sm: 6,\n    md: 6,\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 14\n    }\n  }, title.title)), /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 3\n    }\n  }, \"Question \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 37\n    }\n  }, count, \"/\", 9))), /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BorderLinearProgress, {\n    variant: \"determinate\",\n    value: progress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Card, {\n    className: \"questioncard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"questionname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, count, \": \", (_totalArray$2 = totalArray[0]) === null || _totalArray$2 === void 0 ? void 0 : _totalArray$2.question), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"optioncard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, (_totalArray$3 = totalArray[0]) === null || _totalArray$3 === void 0 ? void 0 : (_totalArray$3$options = _totalArray$3.optionsArray) === null || _totalArray$3$options === void 0 ? void 0 : _totalArray$3$options.map((options, index) => {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: clickedAns === options.optionId ? 'clickoption' : 'nonclickoption',\n      onClick: () => {\n        handleNext(options.optionId, options.optionLabel);\n      },\n      key: index,\n      id: \"cardbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      sm: 4,\n      md: 4,\n      lg: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 23\n      }\n    }, options.optionImg.length ? /*#__PURE__*/React.createElement(\"img\", {\n      className: \"optionImg\",\n      src: options.optionImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 27\n      }\n    }) : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 83\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      sm: 8,\n      md: 8,\n      lg: 8,\n      className: \"optionbg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: \"cardcontent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"optioncontent\",\n      id: \"cardText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 27\n      }\n    }, options.optionLabel))));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"start-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"skip\",\n    onClick: () => {\n      9 - 1 != questionlist[0].question.length ? handleSkip() : handleSubmit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  }, \"Skip the Question\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default DummyQuestionList;","map":{"version":3,"sources":["/home/tanu/Workspace/quiz12/src/user/question/DummyQuestionList.js"],"names":["React","useState","useEffect","Grid","Card","CardContent","makeStyles","withStyles","LinearProgress","services","Redirect","Footer","BorderLinearProgress","theme","root","height","borderRadius","width","colorPrimary","backgroundColor","palette","grey","type","bar","useStyles","gridContainer","paddingLeft","paddingRight","background","minHeight","paper","padding","spacing","textAlign","color","text","secondary","pro","DummyQuestionList","questionlist","totalArray","console","log","classes","title","setTitle","categoryId","JSON","parse","localStorage","getItem","getCategory","categoryData","options","method","headers","result","data","createdBy","activeStep","setActiveStep","answerList","setAnswerList","skipList","setSkipList","createQuiz","setCreateQuiz","setResult","progress","setProgress","count","setCount","clickedAns","setClickedAns","showProgress","index","increment","Math","ceil","handleNext","id","label","qusId","answer","answerId","length","setTimeout","handleSubmit","splice","handleSkip","prevActiveStep","list","quizQuestions","code","setItem","stringify","pathname","state","quizId","question","optionsArray","map","optionId","optionLabel","optionImg"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport { Grid, Card, CardContent } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport '../style/questionlist.css'\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nimport Footer from '../footer/Footer';\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n    width: \"100%\",\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#FFDD52',\n  },\n}))(LinearProgress);\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    background: \"#7555D9\",\n    minHeight: \"100vh\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  pro: {\n    textAlign: \"center\"\n  }\n\n}));\nfunction DummyQuestionList({ questionlist }) {\nvar totalArray=questionlist;\nconsole.log(totalArray)\n  const classes = useStyles();\n  const [title,setTitle]=useState({})\n  var categoryId = JSON.parse(localStorage.getItem(\"categoryId\"));\n\n  useEffect(() => {\n    getCategory();\n}, [1])\n\nconst  getCategory = async () => {\n const categoryData={\n     categoryId:categoryId\n }\n\n const options = {\n     method: 'POST',\n     headers: {\n         \"Apiuserid\": \"49507884\",\n         \"Scope\": \"In.QuizApp.READ\",   \n     }\n }\n const result = await services. getCategory(categoryData,options)\n console.log(result)\n setTitle(result.data.data)\n};\n  // let tutorialSteps = [\n  //   {\n  //     label: questionlist?.question,\n  //     options: questionlist?.optionsArray,\n  //   },\n  // ];\n\n\n  // if (questionlist?.length) {\n  //   tutorialSteps = questionlist;\n  // }\n  const data = JSON.parse(localStorage.getItem('userInfo'));\n  const createdBy = data['name'];\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [answerList, setAnswerList] = React.useState([]);\n  const [skipList, setSkipList] = React.useState([]);\n  const [createQuiz, setCreateQuiz] = useState();\n  const [result, setResult] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(1);\n  const [clickedAns, setClickedAns] = useState(0);\n  \n\n  function showProgress(index) {\n\n    var increment = Math.ceil((activeStep) / (9) * 100);\n\n    setProgress(increment)\n\n  }\n\n\n  const handleNext = (id, label) => {\n    const qusId =totalArray[0]?.qusId;\n    const answer = label;\n    const answerId = id;\n    setClickedAns(id)\n    if (5 === answerList.length) {\n      setAnswerList(\n        [...answerList, { qusId: qusId, answer: answer, answerId: answerId }]\n       \n      )\n      console.log(answerList.length)\n      debugger\n      setTimeout(() => { \n        handleSubmit([...answerList, { qusId: qusId, answer: answer, answerId: answerId }]) }, 500)\n    }\n    else {\n      setAnswerList(\n        [...answerList, { qusId: qusId, answer: answer, answerId: answerId }]\n      )\n      console.log(answerList.length)\n      setTimeout(() => {\n        console.log(totalArray[0])\n        debugger\n          var totalArray=totalArray.splice(0,1)\n          \n          console.log(totalArray)\n        setCount(count + 1)\n      }, 500)\n     \n\n      // debugger\n    }\n    showProgress(totalArray[0].qusId);\n\n\n\n\n  }\n\n\n  const handleSkip = () => { \n    \n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n   };\n\n  const handleSubmit = async ([...answerList]) => {\n    \n\n    const list = {\n      categoryId:categoryId,\n      createdBy: createdBy,\n      quizQuestions: answerList\n    }\n \n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.INSERT\",\n      }\n    }\n    const result = await services.createQuiz(list, options)\n    setCreateQuiz(result.data.data)\n    setResult(true)\n    if (result.data.code === 200) {\n      setResult(true)\n    }\n\n  };\n\n  if (result) {\n    localStorage.setItem(\"createId\", JSON.stringify(createQuiz))\n    return (<Redirect to={{ pathname: \"/sharelink\", state: { quizId: createQuiz } }} push={true} />)\n  }\n\n  return (\n    <div className={classes.gridContainer}>\n      <Grid container>\n        <Grid item xs></Grid>\n        <Grid item xs={11} sm={6} md={6} lg={4} >\n          <div justify=\"center\">\n             <h3 className=\"text1\">{title.title}</h3>\n          </div>\n          <div justify=\"center\">\n  <h4 className=\"question\">Question <span>{count}/{9}</span></h4>\n          </div>\n          <div justify=\"center\">\n            <BorderLinearProgress variant=\"determinate\" value={progress} />\n          </div>\n          <Card className=\"questioncard\">\n            <h3 className=\"questionname\">{count}: {totalArray[0]?.question}</h3>\n            <div className=\"optioncard\">\n              {\n                totalArray[0]?.optionsArray?.map((options, index) => {\n                  return (\n                    <Grid\n                      container\n                      className={\n                        clickedAns === options.optionId ?\n                          'clickoption' : 'nonclickoption'}\n                      onClick={() => { handleNext(options.optionId, options.optionLabel) }}\n                      key={index}\n                      id=\"cardbox\">\n                      <Grid item xs={4} sm={4} md={4} lg={4} >\n                        {options.optionImg.length ?\n                          <img className=\"optionImg\" src={options.optionImg} /> : <span></span>\n                        }\n                      </Grid>\n                      <Grid item xs={8} sm={8} md={8} lg={8} className=\"optionbg\" >\n                        <CardContent className=\"cardcontent\">\n                          <h3 className=\"optioncontent\" id=\"cardText\">\n                            {options.optionLabel}\n                          </h3>\n                        </CardContent>\n                      </Grid>\n                    </Grid>\n                  )\n                })\n              }\n            </div>\n            <div className=\"start-wrapper\">\n              <button className=\"skip\" onClick={() => { 9 - 1 != questionlist[0].question.length ? handleSkip() : handleSubmit() }}>Skip the Question</button>\n            </div>\n          </Card>\n        </Grid>\n        <Grid item xs></Grid>\n      </Grid>\n      <Footer />\n    </div>\n  )\n}\n\nexport default DummyQuestionList\n"]},"metadata":{},"sourceType":"module"}