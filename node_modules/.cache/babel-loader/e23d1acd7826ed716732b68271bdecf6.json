{"ast":null,"code":"var _jsxFileName = \"/home/tanu/Workspace/quiz12/src/user/QuilPlayPart/PlayQuizPart.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, Card, CardContent } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport '../style/playquiz.css';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nimport Footer from '../footer/Footer';\nimport { Helmet } from 'react-helmet';\nconst BorderLinearProgress = withStyles(theme => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n    width: \"100%\"\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#FFDD52'\n  }\n}))(LinearProgress);\nconst useStyles = makeStyles(theme => ({\n  gridContainer: {\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    background: \"#7555D9\",\n    minHeight: \"100vh\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  pro: {\n    textAlign: \"center\"\n  }\n}));\n\nfunction PlayQuizPart({\n  quizdata,\n  que\n}) {\n  var _quiz$activeStep, _quiz$activeStep$opti;\n\n  let [score, setScore] = useState({\n    value: 0\n  });\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [meter, setMeter] = useState(false);\n  const [allResult, setAllResult] = useState([]);\n  const [correctAns, setCorrectAns] = useState(0);\n  const [clickedAns, setClickedAns] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(1);\n  let [answerList, setAnswerList] = React.useState([]);\n  const data = JSON.parse(localStorage.getItem('userInfo'));\n  const name = data['name'];\n  let quiz = [{\n    label: que === null || que === void 0 ? void 0 : que.question,\n    options: que === null || que === void 0 ? void 0 : que.options,\n    answer: que === null || que === void 0 ? void 0 : que.answer\n  }];\n  const classes = useStyles();\n\n  if (que === null || que === void 0 ? void 0 : que.length) {\n    quiz = que;\n  }\n\n  function showProgress(index) {\n    var increment = Math.ceil(count / maxSteps * 100);\n    setProgress(increment);\n  }\n\n  const maxSteps = quiz.length;\n\n  const handleSelect = label => {\n    setClickedAns(label);\n\n    if (label === quiz[activeStep].answer) {\n      score = {\n        value: ++score.value\n      };\n      setCorrectAns(quiz[activeStep].answer);\n      setAnswerList([...answerList, {\n        qusId: count,\n        answer: label,\n        correct: \"yes\"\n      }]);\n    } else {\n      setCorrectAns(quiz[activeStep].answer);\n      setAnswerList([...answerList, {\n        qusId: count,\n        answer: label,\n        correct: \"no\"\n      }]);\n    }\n  };\n\n  const handleNext = label => {\n    if (maxSteps - 1 != activeStep) {\n      handleSelect(label);\n      setTimeout(() => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n        setCount(count + 1);\n      }, 300);\n      handleSelect(label);\n    } else {\n      handleSelect(label);\n      setTimeout(() => {\n        handleSubmit([...answerList, {\n          qusId: count,\n          answer: label,\n          correct: \"yes\"\n        }]);\n      }, 500);\n    }\n\n    showProgress(quiz[activeStep].qusId);\n  };\n\n  const handleSubmit = async ([...answerList]) => {\n    const data = {\n      quizId: quizdata[0].adminQuizId,\n      score: score.value,\n      playerName: name,\n      answers: answerList\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.INSERT\"\n      }\n    };\n    const result = await services.saveAnswer(data, options);\n    setAllResult(result.data.data);\n    setMeter(result.data.code);\n  };\n\n  if (meter === 200) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/quizscore',\n        state: {\n          quizLength: {\n            maxSteps\n          },\n          score: {\n            score\n          },\n          name: {\n            name\n          },\n          resultData: {\n            allResult\n          }\n        }\n      },\n      push: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, quizdata[0].title)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    sm: 6,\n    md: 6,\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, quizdata[0].title)), /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, \"Question \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 47\n    }\n  }, count, \"/\", maxSteps))), /*#__PURE__*/React.createElement(\"div\", {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BorderLinearProgress, {\n    variant: \"determinate\",\n    value: progress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Card, {\n    className: \"playoptioncard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"questionname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, quiz[activeStep].questionTitle), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playcard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, (_quiz$activeStep = quiz[activeStep]) === null || _quiz$activeStep === void 0 ? void 0 : (_quiz$activeStep$opti = _quiz$activeStep.optionsArray) === null || _quiz$activeStep$opti === void 0 ? void 0 : _quiz$activeStep$opti.map((options, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }, options.optionImg.length ? /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      className: correctAns === options.optionLabel ? 'correctplay' : clickedAns === options.optionLabel ? 'incorrectplay' : 'options',\n      correct: quiz[activeStep].answer,\n      onClick: () => {\n        handleNext(options.optionLabel);\n      },\n      key: index,\n      id: \"cardbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      sm: 4,\n      md: 4,\n      lg: 4,\n      className: \"image-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"optionImg\",\n      src: `${quizdata[0].image_base_path}/${options.optionImg}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      sm: 8,\n      md: 8,\n      lg: 8,\n      className: \"optionbg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: \"cardcontent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"optioncontent\",\n      id: \"cardText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 31\n      }\n    }, options.optionLabel)))) : /*#__PURE__*/React.createElement(Grid, {\n      justify: \"center\",\n      container: true,\n      className: \"new\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      sm: 10,\n      md: 10,\n      lg: 10,\n      className: correctAns === options.optionLabel ? 'correctplay' : clickedAns === options.optionLabel ? 'incorrectplay' : 'options',\n      correct: quiz[activeStep].answer,\n      onClick: () => {\n        handleNext(options.optionLabel);\n      },\n      key: index,\n      id: \"cardbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: \"newcontent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 30\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"optioncontent\",\n      id: \"cardText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 31\n      }\n    }, options.optionLabel)))));\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default PlayQuizPart;","map":{"version":3,"sources":["/home/tanu/Workspace/quiz12/src/user/QuilPlayPart/PlayQuizPart.js"],"names":["React","useState","useEffect","Grid","Card","CardContent","makeStyles","withStyles","LinearProgress","services","Redirect","Footer","Helmet","BorderLinearProgress","theme","root","height","borderRadius","width","colorPrimary","backgroundColor","palette","grey","type","bar","useStyles","gridContainer","paddingLeft","paddingRight","background","minHeight","paper","padding","spacing","textAlign","color","text","secondary","pro","PlayQuizPart","quizdata","que","score","setScore","value","activeStep","setActiveStep","meter","setMeter","allResult","setAllResult","correctAns","setCorrectAns","clickedAns","setClickedAns","progress","setProgress","count","setCount","answerList","setAnswerList","data","JSON","parse","localStorage","getItem","name","quiz","label","question","options","answer","classes","length","showProgress","index","increment","Math","ceil","maxSteps","handleSelect","qusId","correct","handleNext","setTimeout","prevActiveStep","handleSubmit","quizId","adminQuizId","playerName","answers","method","headers","result","saveAnswer","code","pathname","state","quizLength","resultData","title","questionTitle","optionsArray","map","optionImg","optionLabel","image_base_path"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Grid, Card, CardContent } from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport '../style/playquiz.css'\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport services from '../../services/services';\nimport { Redirect } from 'react-router-dom';\nimport Footer from '../footer/Footer';\nimport { Helmet } from 'react-helmet';\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n    width: \"100%\",\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#FFDD52',\n  },\n}))(LinearProgress);\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    background: \"#7555D9\",\n    minHeight: \"100vh\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  pro: {\n    textAlign: \"center\"\n  }\n\n}));\nfunction PlayQuizPart({ quizdata, que }) {\n  let [score, setScore] = useState({ value: 0 })\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [meter, setMeter] = useState(false);\n  const [allResult, setAllResult] = useState([]);\n  const [correctAns, setCorrectAns] = useState(0);\n  const [clickedAns, setClickedAns] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(1);\n  let [answerList, setAnswerList] = React.useState([]);\n  const data = JSON.parse(localStorage.getItem('userInfo'));\n  const name = data['name'];\n\n\n  let quiz = [\n    {\n      label: que?.question,\n      options: que?.options,\n      answer: que?.answer\n    },\n  ];\n\n  const classes = useStyles();\n  if (que?.length) {\n    quiz = que;\n  }\n\n  function showProgress(index) {\n\n    var increment = Math.ceil((count) / (maxSteps) * 100);\n    setProgress(increment)\n\n  }\n  const maxSteps = quiz.length;\n  const handleSelect = (label) => {\n    setClickedAns(label)\n    if (label === quiz[activeStep].answer) {\n      score = { value: ++score.value };\n      setCorrectAns(quiz[activeStep].answer)\n      setAnswerList([\n        ...\n        answerList,\n        {\n          qusId: count,\n          answer: label,\n          correct: \"yes\"\n        }\n      ])\n    }\n    else {\n      setCorrectAns(quiz[activeStep].answer)\n      setAnswerList([\n        ...\n        answerList,\n        {\n          qusId: count,\n          answer: label,\n          correct: \"no\"\n        }\n      ])\n    }\n\n  }\n  const handleNext = (label) => {\n    if (maxSteps - 1 != activeStep) {\n      handleSelect(label);\n      setTimeout(() => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1)\n        setCount(count + 1)\n      }, 300)\n      handleSelect(label);\n    }\n    else {\n      handleSelect(label);\n      setTimeout(() => {\n        handleSubmit([...answerList, {\n          qusId: count,\n          answer: label,\n          correct: \"yes\"\n        }])\n      }, 500)\n\n    }\n    showProgress(quiz[activeStep].qusId);\n  }\n\n  const handleSubmit = async ([...answerList]) => {\n    const data = {\n      quizId: quizdata[0].adminQuizId,\n      score: score.value,\n      playerName: name,\n      answers: answerList\n    }\n    const options = {\n      method: 'POST',\n      headers: {\n        \"Apiuserid\": \"49507884\",\n        \"Scope\": \"In.QuizApp.INSERT\",\n      }\n    }\n    const result = await services.saveAnswer(data, options)\n    setAllResult(result.data.data)\n    setMeter(result.data.code)\n\n  }\n  if (meter === 200) {\n    return (<Redirect to={{\n      pathname: '/quizscore', state: { quizLength: { maxSteps }, score: { score }, name: { name }, resultData: { allResult } }\n    }} push={true}\n    />\n    )\n\n  }\n  return (\n    <div className={classes.gridContainer}>\n      <Grid container>\n  <Helmet><title>{quizdata[0].title}</title></Helmet>\n        <Grid item xs></Grid>\n        <Grid item xs={11} sm={6} md={6} lg={4} >\n          <div justify=\"center\">\n            <h3 className=\"title\">{quizdata[0].title}</h3>\n           </div>\n          <div justify=\"center\">\n            <h4 className=\"question\">Question <span>{count}/{maxSteps}</span></h4>\n          </div>\n          <div justify=\"center\">\n            <BorderLinearProgress variant=\"determinate\" value={progress} />\n          </div>\n          <Card className=\"playoptioncard\">\n            <h3 className=\"questionname\">{quiz[activeStep].questionTitle}</h3>\n            <div className=\"playcard\">\n              {\n                quiz[activeStep]?.optionsArray?.map((options, index) => {\n\n                  return (\n                    <div key={index}>\n                      {options.optionImg.length ?\n                        <Grid\n                          container\n                          className={\n                            correctAns === options.optionLabel ?\n                              'correctplay' :\n                              clickedAns === options.optionLabel ?\n                                'incorrectplay' : 'options'}\n                          correct={quiz[activeStep].answer}\n                          onClick={() => { handleNext(options.optionLabel) }}\n                          key={index}\n                          id=\"cardbox\">\n\n\n                          <Grid item xs={4} sm={4} md={4} lg={4} className=\"image-div\" >\n                            <img className=\"optionImg\" src={`${quizdata[0].image_base_path}/${options.optionImg}`} />\n                          </Grid>\n                          <Grid item xs={8} sm={8} md={8} lg={8} className=\"optionbg\" >\n                            <CardContent className=\"cardcontent\">\n                              <h3 className=\"optioncontent\" id=\"cardText\">\n                                {options.optionLabel}\n                              </h3>\n                            </CardContent>\n                       </Grid>\n                        </Grid>\n                        :\n\n                        <Grid justify=\"center\" container className=\"new\">\n                          <Grid item xs={10} sm={10} md={10} lg={10}\n                            className={\n                              correctAns === options.optionLabel ?\n                                'correctplay' :\n                                clickedAns === options.optionLabel ?\n                                  'incorrectplay' : 'options'}\n                            correct={quiz[activeStep].answer}\n                            onClick={() => { handleNext(options.optionLabel) }}\n                            key={index}\n                            id=\"cardbox\">\n                             <CardContent className=\"newcontent\">\n                              <h3 className=\"optioncontent\" id=\"cardText\">\n                                {options.optionLabel}\n                              </h3>\n                            </CardContent>\n\n                          </Grid>\n                        </Grid>\n                      }</div>\n\n                  )\n\n                })\n              }\n            </div>\n          </Card>\n        </Grid>\n        <Grid item xs></Grid>\n      </Grid>\n      <Footer />\n    </div>\n  )\n}\n\nexport default PlayQuizPart\n"]},"metadata":{},"sourceType":"module"}